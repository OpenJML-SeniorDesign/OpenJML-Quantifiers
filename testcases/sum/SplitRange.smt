; Proof attempt for SplitRangeUnsat.s(int,int)
(set-option :produce-models true)
(set-logic ALL)
(set-option :AUTO_CONFIG false)
(set-option :smt.MBQI false)
(declare-sort REF 0)
(declare-fun NULL () REF)
(declare-fun NULLSTRING () (Array Int Int))
(declare-fun stringConcat (REF REF ) REF)
(declare-fun stringLength ((Array Int Int) ) Int)
(declare-fun __JMLlength () (Array REF Int))
(assert (forall ((o REF) ) (>= (select __JMLlength o) 0)))
(declare-fun asIntArray (REF ) (Array Int Int))
(declare-fun asREFArray (REF ) (Array Int REF))
(declare-fun intValue (REF ) Int)
(declare-fun booleanValue (REF ) Bool)
(define-fun |#is_byte#| ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(define-fun |#is_short#| ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(define-fun |#is_char#| ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(define-fun |#is_int#| ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(define-fun |#is_long#| ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(define-fun |#big8#| () Int 256)
(define-fun |#big16#| () Int 65536)
(define-fun |#big32#| () Int 4294967296)
(define-fun |#big64#| () Int (* 4294967296 4294967296))
(define-fun |#max8#| () Int 127)
(define-fun |#min8#| () Int (- 128))
(define-fun |#max16#| () Int 32767)
(define-fun |#min16#| () Int (- 32768))
(define-fun |#max32#| () Int 2147483647)
(define-fun |#min32#| () Int (- 2147483648))
(define-fun |#max64#| () Int (- (* 2147483648 4294967296) 1))
(define-fun |#min64#| () Int (- (* 2147483648 4294967296)))
(define-fun |#isMul32ok#| ((x Int)(y Int)) Bool (let ((prod (* x y)) ) (and (<= |#min32#| prod) (<= prod |#max32#|))))
(define-fun |#isMul64ok#| ((x Int)(y Int)) Bool (let ((prod (* x y)) ) (and (<= |#min64#| prod) (<= prod |#max64#|))))
(define-fun |#trunc32s#| ((x Int)) Int (let ((m (mod x |#big32#|)) ) (ite (<= m |#max32#|) m (- m |#big32#|))))
(define-fun |#trunc16s#| ((x Int)) Int (let ((m (mod x |#big16#|)) ) (ite (<= m |#max16#|) m (- m |#big16#|))))
(define-fun |#trunc8s#| ((x Int)) Int (let ((m (mod x |#big8#|)) ) (ite (<= m |#max8#|) m (- m |#big8#|))))
(define-fun |#cdiv#| ((a Int)(b Int)) Int (ite (>= a 0) (div a b) (div (- a) (- b))))
(define-fun |#cmod#| ((a Int)(b Int)) Int (ite (>= a 0) (mod a b) (mod (- a) (- b))))
(define-fun |#inRange32#| ((a Int)) Bool (and (<= |#min32#| a) (<= a |#max32#|)))
(define-fun |#add32ok#| ((a Int)(b Int)) Bool (|#inRange32#| (+ a b)))
(define-fun |#add32#| ((a Int)(b Int)) Int (let ((p (+ a b)) ) (ite (|#inRange32#| p) p (ite (< |#max32#| p) (- p |#big32#|) (+ p |#big32#|)))))
(define-fun |#mul32ok#| ((a Int)(b Int)) Bool (|#inRange32#| (* a b)))
(define-fun |#mul32#| ((a Int)(b Int)) Int (let ((p (* a b)) ) (ite (|#inRange32#| p) p (+ (mod (- p |#min32#|) |#big32#|) |#min32#|))))
(define-fun |#inRange64#| ((a Int)) Bool (and (<= |#min64#| a) (<= a |#max64#|)))
(define-fun |#add64ok#| ((a Int)(b Int)) Bool (|#inRange64#| (+ a b)))
(define-fun |#add64#| ((a Int)(b Int)) Int (let ((p (+ a b)) ) (ite (|#inRange64#| p) p (ite (< |#max64#| p) (- p |#big64#|) (+ p |#big64#|)))))
(define-fun |#mul64ok#| ((a Int)(b Int)) Bool (|#inRange64#| (* a b)))
(define-fun |#mul64#| ((a Int)(b Int)) Int (let ((p (* a b)) ) (ite (|#inRange64#| p) p (+ (mod (- p |#min64#|) |#big64#|) |#min64#|))))
(declare-sort |RANGE| 0)
(declare-fun |range:cons| (Int Int ) |RANGE|)
(declare-fun |range:lo| (|RANGE| ) Int)
(declare-fun |range:hi| (|RANGE| ) Int)
(assert (forall ((i Int) (j Int) ) (= i (|range:lo| (|range:cons| i j)))))
(assert (forall ((i Int) (j Int) ) (= j (|range:hi| (|range:cons| i j)))))
(declare-sort JMLTypeSort 0)
(declare-fun javaTypeOf (REF ) REF)
(declare-fun jmlTypeOf (REF ) JMLTypeSort)
(declare-fun typearg1_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_2 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_2 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_3 (JMLTypeSort ) JMLTypeSort)
(declare-fun javaSubType (REF REF ) Bool)
(declare-fun jmlSubType (JMLTypeSort JMLTypeSort ) Bool)
(declare-fun erasure (JMLTypeSort ) REF)
(declare-fun erasure_java (REF ) REF)
(declare-fun _JMLT_0 (REF ) JMLTypeSort)
(declare-fun _JMLT_1 (REF JMLTypeSort ) JMLTypeSort)
(declare-fun _JMLT_2 (REF JMLTypeSort JMLTypeSort ) JMLTypeSort)
(declare-fun _JMLT_3 (REF JMLTypeSort JMLTypeSort JMLTypeSort ) JMLTypeSort)
(assert (forall ((o REF) ) (= (erasure (jmlTypeOf o)) (javaTypeOf o))))
(assert (forall ((o REF) ) (= (erasure_java (javaTypeOf o)) (javaTypeOf o))))
(declare-fun _makeArrayType (REF ) REF)
(declare-fun _isArrayType (REF ) Bool)
(declare-fun _makeJMLArrayType (JMLTypeSort ) JMLTypeSort)
(declare-fun _isJMLArrayType (JMLTypeSort ) Bool)
(declare-fun __arrayElemType (JMLTypeSort ) JMLTypeSort)
(assert (forall ((T JMLTypeSort) ) (= (erasure (_makeJMLArrayType T)) (_makeArrayType (erasure T)))))
(assert (forall ((T1 JMLTypeSort) (T2 JMLTypeSort) ) (=> (jmlSubType T1 T2) (javaSubType (erasure T1) (erasure T2)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) ) (= (javaSubType T1 T2) (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T3)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (and (javaSubType T1 T2) (not (= T3 T4))) (not (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T4))))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T4)) (and (javaSubType T1 T2) (= T3 T4)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (= (_JMLT_1 T1 T3) (_JMLT_1 T2 T4)) (and (= T1 T2) (= T3 T4)))))
(declare-fun nonnullelements (REF (Array REF (Array Int REF)) ) Bool)
(assert (forall ((a REF) (arrays (Array REF (Array Int REF))) ) (= (nonnullelements a arrays) (forall ((i Int) ) (=> (and (<= 0 i) (< i (select __JMLlength a))) (distinct NULL (select (select arrays a) i)))))))
(declare-fun T_int () REF)
(declare-fun JMLT_int () JMLTypeSort)
(declare-fun T_java_lang_RuntimeException () REF)
(declare-fun JMLT_java_lang_RuntimeException () JMLTypeSort)
(declare-fun T_java_lang_Object () REF)
(declare-fun JMLT_java_lang_Object () JMLTypeSort)
(declare-fun T_java_lang_Class () REF)
(declare-fun T_java_lang_Exception () REF)
(declare-fun JMLT_java_lang_Exception () JMLTypeSort)
(declare-fun T_java_lang_Integer () REF)
(declare-fun JMLT_java_lang_Integer () JMLTypeSort)
(assert (not (_isArrayType T_int)))
(assert (not (_isJMLArrayType JMLT_int)))
(assert (= (_JMLT_0 T_int) JMLT_int))
(assert (= (erasure JMLT_int) T_int))
(assert (not (_isArrayType T_java_lang_RuntimeException)))
(assert (not (_isJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (= (_JMLT_0 T_java_lang_RuntimeException) JMLT_java_lang_RuntimeException))
(assert (= (erasure JMLT_java_lang_RuntimeException) T_java_lang_RuntimeException))
(assert (not (_isArrayType T_java_lang_Object)))
(assert (not (_isJMLArrayType JMLT_java_lang_Object)))
(assert (= (_JMLT_0 T_java_lang_Object) JMLT_java_lang_Object))
(assert (= (erasure JMLT_java_lang_Object) T_java_lang_Object))
(assert (not (_isArrayType T_java_lang_Class)))
(assert (forall ((t REF) ) (=> (javaSubType t T_java_lang_Class) (= t T_java_lang_Class))))
(assert (not (_isJMLArrayType (_JMLT_1 T_java_lang_Class JMLT_java_lang_Integer))))
(assert (= (erasure (_JMLT_1 T_java_lang_Class JMLT_java_lang_Integer)) T_java_lang_Class))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t (_JMLT_1 T_java_lang_Class JMLT_java_lang_Integer)) (= t (_JMLT_1 T_java_lang_Class JMLT_java_lang_Integer)))))
(assert (not (_isArrayType T_java_lang_Exception)))
(assert (not (_isJMLArrayType JMLT_java_lang_Exception)))
(assert (= (_JMLT_0 T_java_lang_Exception) JMLT_java_lang_Exception))
(assert (= (erasure JMLT_java_lang_Exception) T_java_lang_Exception))
(assert (not (_isArrayType T_java_lang_Integer)))
(assert (forall ((t REF) ) (=> (javaSubType t T_java_lang_Integer) (= t T_java_lang_Integer))))
(assert (not (_isJMLArrayType JMLT_java_lang_Integer)))
(assert (= (_JMLT_0 T_java_lang_Integer) JMLT_java_lang_Integer))
(assert (= (erasure JMLT_java_lang_Integer) T_java_lang_Integer))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t JMLT_java_lang_Integer) (= t JMLT_java_lang_Integer))))
(assert (distinct T_int T_java_lang_RuntimeException T_java_lang_Object T_java_lang_Class T_java_lang_Exception T_java_lang_Integer))
(assert (distinct JMLT_int JMLT_java_lang_RuntimeException JMLT_java_lang_Object JMLT_java_lang_Exception JMLT_java_lang_Integer))
(assert (javaSubType T_int T_int))
(assert (javaSubType (_makeArrayType T_int) (_makeArrayType T_int)))
(assert (jmlSubType JMLT_int JMLT_int))
(assert (jmlSubType (_makeJMLArrayType JMLT_int) (_makeJMLArrayType JMLT_int)))
(assert (not (javaSubType T_int T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_int) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_int JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_int) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_int)) (not (javaSubType (javaTypeOf e) T_java_lang_RuntimeException)))))
(assert (not (javaSubType T_int T_java_lang_Object)))
(assert (not (javaSubType (_makeArrayType T_int) (_makeArrayType T_java_lang_Object))))
(assert (not (jmlSubType JMLT_int JMLT_java_lang_Object)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_int) (_makeJMLArrayType JMLT_java_lang_Object))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_int)) (not (javaSubType (javaTypeOf e) T_java_lang_Object)))))
(assert (not (javaSubType T_int T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_int) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_int T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_int) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_int JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_int) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_int)) (not (javaSubType (javaTypeOf e) T_java_lang_Exception)))))
(assert (not (javaSubType T_int T_java_lang_Integer)))
(assert (not (javaSubType (_makeArrayType T_int) (_makeArrayType T_java_lang_Integer))))
(assert (not (jmlSubType JMLT_int JMLT_java_lang_Integer)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_int) (_makeJMLArrayType JMLT_java_lang_Integer))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_int)) (not (javaSubType (javaTypeOf e) T_java_lang_Integer)))))
(assert (not (javaSubType T_java_lang_RuntimeException T_int)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_int))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_int)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_int))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_RuntimeException))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_RuntimeException)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_RuntimeException))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_RuntimeException) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (not (javaSubType T_java_lang_RuntimeException T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Class))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_RuntimeException) (javaSubType (javaTypeOf e) T_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_RuntimeException T_java_lang_Integer)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Integer))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Integer)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Integer))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_java_lang_RuntimeException)) (not (javaSubType (javaTypeOf e) T_java_lang_Integer)))))
(assert (not (javaSubType T_java_lang_Object T_int)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_int))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_int)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_int))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Object T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_Exception) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Integer)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Integer))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Integer)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Integer))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_Integer) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (not (javaSubType T_java_lang_Class T_int)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_int))))
(assert (not (javaSubType T_java_lang_Class T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Class T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Object)))
(assert (javaSubType T_java_lang_Class T_java_lang_Class))
(assert (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Class)))
(assert (not (javaSubType T_java_lang_Class T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_Class T_java_lang_Integer)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Integer))))
(assert (not (javaSubType T_java_lang_Exception T_int)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_int))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_int)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_int))))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Class))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_Integer)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Integer))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Integer)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Integer))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_java_lang_Exception)) (not (javaSubType (javaTypeOf e) T_java_lang_Integer)))))
(assert (not (javaSubType T_java_lang_Integer T_int)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_int))))
(assert (not (jmlSubType JMLT_java_lang_Integer JMLT_int)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Integer) (_makeJMLArrayType JMLT_int))))
(assert (not (javaSubType T_java_lang_Integer T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Integer JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Integer) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Integer T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Integer JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Integer) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Integer T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_Integer T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_Integer JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Integer) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (javaSubType T_java_lang_Integer T_java_lang_Integer))
(assert (javaSubType (_makeArrayType T_java_lang_Integer) (_makeArrayType T_java_lang_Integer)))
(assert (jmlSubType JMLT_java_lang_Integer JMLT_java_lang_Integer))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Integer) (_makeJMLArrayType JMLT_java_lang_Integer)))
(assert (forall ((t1 REF) (t2 REF) (t3 REF) ) (=> (and (javaSubType t1 t2) (javaSubType t2 t3)) (javaSubType t1 t3))))
(assert (forall ((t1 JMLTypeSort) (t2 JMLTypeSort) (t3 JMLTypeSort) ) (=> (and (jmlSubType t1 t2) (jmlSubType t2 t3)) (jmlSubType t1 t3))))
(assert (distinct T_int T_java_lang_RuntimeException T_java_lang_Object T_java_lang_Class T_java_lang_Exception T_java_lang_Integer))
(assert (distinct (_JMLT_0 T_java_lang_Integer) (_JMLT_0 T_java_lang_Exception) (_JMLT_0 T_java_lang_Object) (_JMLT_0 T_java_lang_RuntimeException) (_JMLT_1 T_java_lang_Class JMLT_java_lang_Integer) (_JMLT_0 T_int)))
(declare-fun |java.lang.Integer_MAX_VALUE| () Int)
(declare-fun |java.lang.Integer_SIZE| () Int)
(declare-fun |java.lang.Integer_MIN_VALUE| () Int)
(declare-fun |java.lang.Integer_TYPE| () REF)
(declare-fun |java.lang.Integer_BYTES| () Int)
(declare-fun |java.lang.Integer_MAX_UNSIGNED_INT| () Int)
(declare-fun |n_0_0___3| () Int)
(declare-fun |k_0_0___4| () Int)
(declare-fun |`exception_196_196___5| () REF)
(declare-fun |`terminationPosition_196_196___6| () Int)
(declare-fun |n_202_202___7| () Int)
(declare-fun |k_209_209___8| () Int)
(declare-fun |`result_196_196___9| () Int)
(declare-fun |j_375_375___10| () Int)
(declare-fun |total_221_221___11| () Int)
(declare-fun |BL_0_afterIf_3_source| () Int)
(declare-fun |BL_0_afterIf_6_source| () Int)
(declare-fun |Pre_2_102_59___12| () Bool)
(declare-fun |ASSERT_51| () Bool)
(declare-fun |BL_0_afterIf_9_source| () Int)
(declare-fun |total_221_221___13| () Int)
(declare-fun |j_375_375___14| () Int)
(declare-fun |index_366_11_366_366___15| () Int)
(declare-fun |ASSERT_53| () Bool)
(declare-fun |ASSERT_55| () Bool)
(declare-fun |index_366_11_366_394___16| () Int)
(declare-fun |j_375_389___17| () Int)
(declare-fun |total_221_510___18| () Int)
(declare-fun |index_366_11_366_394___19| () Int)
(declare-fun |ASSERT_63| () Bool)
(declare-fun |ASSERT_65| () Bool)
(declare-fun |ASSERT_68| () Bool)
(declare-fun |ASSERT_69| () Bool)
(declare-fun |total_221_510___20| () Int)
(declare-fun |BL_0_afterIf_30_source| () Int)
(declare-fun |ASSERT_71| () Bool)
(declare-fun |ASSERT_72| () Bool)
(declare-fun |j_375_389___21| () Int)
(declare-fun |index_366_11_366_366___22| () Int)
(declare-fun |ASSERT_73| () Bool)
(declare-fun |ASSERT_74| () Bool)
(declare-fun |ASSERT_75| () Bool)
(declare-fun |BL_366_LoopAfter_24_source| () Int)
(declare-fun |`result_196_532___23| () Int)
(declare-fun |`terminationPosition_196_532___24| () Int)
(declare-fun |`exception_196_532___25| () REF)
(declare-fun |BL_196_finally_15_source| () Int)
(declare-fun |__JMLsavedException_196_196_196___26| () REF)
(declare-fun |__JMLsavedTermination_196_196_196___27| () Int)
(declare-fun |ASSERT_76| () Bool)
(declare-fun |ASSERT_77| () Bool)
(declare-fun |BL_0_afterIf_37_source| () Int)
(declare-fun |ASSERT_78| () Bool)
(declare-fun |BL_0_afterIf_34_source| () Int)
(declare-fun |`exception_196_196___28| () REF)
(declare-fun |`terminationPosition_196_196___29| () Int)
(declare-fun |BL_196_AfterTry_13_source| () Int)
(declare-fun BL_196Start_1 () Bool)
(declare-fun BL_212bodyBegin_2 () Bool)
(declare-fun BL_0_then_4 () Bool)
(declare-fun BL_0_else_5 () Bool)
(declare-fun BL_0_afterIf_3 () Bool)
(declare-fun BL_0_then_7 () Bool)
(declare-fun BL_0_else_8 () Bool)
(declare-fun BL_0_afterIf_6 () Bool)
(declare-fun BL_0_then_10 () Bool)
(declare-fun BL_0_else_11 () Bool)
(declare-fun BL_0_afterIf_9 () Bool)
(declare-fun BL_196_AfterLabel_12 () Bool)
(declare-fun BL_394_AfterLabel_20 () Bool)
(declare-fun BL_366_LoopBody_21 () Bool)
(declare-fun BL_394_AfterLabel_25 () Bool)
(declare-fun BL_0_then_27 () Bool)
(declare-fun BL_0_else_28 () Bool)
(declare-fun BL_0_afterIf_26 () Bool)
(declare-fun BL_0_then_31 () Bool)
(declare-fun BL_0_else_32 () Bool)
(declare-fun BL_0_afterIf_30 () Bool)
(declare-fun BL_394_AfterLabel_29 () Bool)
(declare-fun BL_366_LoopContinue_22 () Bool)
(declare-fun BL_366_LoopEnd_23 () Bool)
(declare-fun BL_366_LoopAfter_24 () Bool)
(declare-fun BL_532_return_33 () Bool)
(declare-fun BL_196tryTarget_14 () Bool)
(declare-fun BL_196noException_16 () Bool)
(declare-fun BL_196nocatch_17 () Bool)
(declare-fun BL_196_finally_15 () Bool)
(declare-fun BL_0_then_35 () Bool)
(declare-fun BL_0_then_38 () Bool)
(declare-fun BL_0_else_39 () Bool)
(declare-fun BL_0_afterIf_37 () Bool)
(declare-fun BL_0_else_36 () Bool)
(declare-fun BL_0_afterIf_34 () Bool)
(declare-fun BL_196finallyNormal_18 () Bool)
(declare-fun BL_196finallyExit_19 () Bool)
(declare-fun BL_196_AfterTry_13 () Bool)
(assert (= BL_196Start_1 BL_212bodyBegin_2))
(declare-fun |__JML_AssumeCheck_| () Int)
(define-fun |_JML__tmp4| () REF |java.lang.Integer_TYPE|)
(define-fun |_JML__tmp5| () Bool (= |java.lang.Integer_TYPE| T_int))
(declare-fun |_JML__tmp6| () Bool)
(declare-fun |_JML__tmp7| () Bool)
(define-fun BL_212bodyBegin_2__A1 () Bool (= |`exception_196_196___5| NULL))
(define-fun BL_212bodyBegin_2__A2 () Bool (= |`terminationPosition_196_196___6| 0))
(define-fun BL_212bodyBegin_2__A3 () Bool (= |java.lang.Integer_MIN_VALUE| (- 2147483648)))
(define-fun BL_212bodyBegin_2__A4 () Bool (= |java.lang.Integer_MAX_VALUE| 2147483647))
(define-fun BL_212bodyBegin_2__A5 () Bool (= |java.lang.Integer_MAX_UNSIGNED_INT| 4294967295))
(define-fun BL_212bodyBegin_2__A6 () Bool (= |java.lang.Integer_SIZE| 32))
(define-fun BL_212bodyBegin_2__A7 () Bool (= |java.lang.Integer_BYTES| 4))
(define-fun BL_212bodyBegin_2__A8 () Bool (and (<= (- 2147483648) |j_375_375___10|) (<= |j_375_375___10| 2147483647)))
(define-fun BL_212bodyBegin_2__A9 () Bool (and (<= (- 2147483648) |total_221_221___11|) (<= |total_221_221___11| 2147483647)))
(define-fun BL_212bodyBegin_2__A10 () Bool |_JML__tmp5|)
(define-fun BL_212bodyBegin_2__A11 () Bool (and (<= (- 2147483648) |n_202_202___7|) (<= |n_202_202___7| 2147483647)))
(define-fun BL_212bodyBegin_2__A12 () Bool (and (<= (- 2147483648) |k_209_209___8|) (<= |k_209_209___8| 2147483647)))
(define-fun BL_212bodyBegin_2__A13 () Bool (= |_JML__tmp6| true))
(assert (= BL_212bodyBegin_2 (=> BL_212bodyBegin_2__A1 (=> BL_212bodyBegin_2__A2 (=> BL_212bodyBegin_2__A3 (=> BL_212bodyBegin_2__A4 (=> BL_212bodyBegin_2__A5 (=> BL_212bodyBegin_2__A6 (=> BL_212bodyBegin_2__A7 (=> BL_212bodyBegin_2__A8 (=> BL_212bodyBegin_2__A9 (=> BL_212bodyBegin_2__A10 (=> BL_212bodyBegin_2__A11 (=> BL_212bodyBegin_2__A12 (=> BL_212bodyBegin_2__A13 (and BL_0_then_4 BL_0_else_5))))))))))))))))
(define-fun |_JML__tmp8| () Bool (and (< 0 |n_202_202___7|) (< |n_202_202___7| 100)))
(define-fun BL_0_then_4__A1 () Bool |_JML__tmp6|)
(define-fun BL_0_then_4__A2 () Bool (= |_JML__tmp7| |_JML__tmp8|))
(define-fun BL_0_then_4__A3 () Bool (= |BL_0_afterIf_3_source| 4))
(assert (= BL_0_then_4 (=> BL_0_then_4__A1 (=> BL_0_then_4__A2 (=> BL_0_then_4__A3 BL_0_afterIf_3)))))
(define-fun BL_0_else_5__A1 () Bool (not |_JML__tmp6|))
(define-fun BL_0_else_5__A2 () Bool (= |_JML__tmp7| false))
(define-fun BL_0_else_5__A3 () Bool (= |BL_0_afterIf_3_source| 5))
(assert (= BL_0_else_5 (=> BL_0_else_5__A1 (=> BL_0_else_5__A2 (=> BL_0_else_5__A3 BL_0_afterIf_3)))))
(declare-fun |_JML__tmp9| () Bool)
(assert (= BL_0_afterIf_3 (and BL_0_then_7 BL_0_else_8)))
(define-fun |_JML__tmp10| () Bool (and (< 0 |k_209_209___8|) (< |k_209_209___8| |k_209_209___8|)))
(define-fun BL_0_then_7__A1 () Bool |_JML__tmp7|)
(define-fun BL_0_then_7__A2 () Bool (= |_JML__tmp9| |_JML__tmp10|))
(define-fun BL_0_then_7__A3 () Bool (= |BL_0_afterIf_6_source| 7))
(assert (= BL_0_then_7 (=> BL_0_then_7__A1 (=> BL_0_then_7__A2 (=> BL_0_then_7__A3 BL_0_afterIf_6)))))
(define-fun BL_0_else_8__A1 () Bool (not |_JML__tmp7|))
(define-fun BL_0_else_8__A2 () Bool (= |_JML__tmp9| false))
(define-fun BL_0_else_8__A3 () Bool (= |BL_0_afterIf_6_source| 8))
(assert (= BL_0_else_8 (=> BL_0_else_8__A1 (=> BL_0_else_8__A2 (=> BL_0_else_8__A3 BL_0_afterIf_6)))))
(define-fun BL_0_afterIf_6__A1 () Bool (= |Pre_2_102_59___12| |_JML__tmp9|))
(define-fun BL_0_afterIf_6__A2 () Bool |Pre_2_102_59___12|)
(define-fun BL_0_afterIf_6__A3 () Bool (= |ASSERT_51| (distinct |__JML_AssumeCheck_| 1)))
(assert (= BL_0_afterIf_6 (=> BL_0_afterIf_6__A1 (=> BL_0_afterIf_6__A2 (=> BL_0_afterIf_6__A3 (and |ASSERT_51| (=> |ASSERT_51| (and BL_0_then_10 BL_0_else_11))))))))
(define-fun BL_0_then_10__A1 () Bool |Pre_2_102_59___12|)
(define-fun BL_0_then_10__A2 () Bool (= |BL_0_afterIf_9_source| 10))
(assert (= BL_0_then_10 (=> BL_0_then_10__A1 (=> BL_0_then_10__A2 BL_0_afterIf_9))))
(define-fun BL_0_else_11__A1 () Bool (not |Pre_2_102_59___12|))
(define-fun BL_0_else_11__A2 () Bool (= |BL_0_afterIf_9_source| 11))
(assert (= BL_0_else_11 (=> BL_0_else_11__A1 (=> BL_0_else_11__A2 BL_0_afterIf_9))))
(assert (= BL_0_afterIf_9 BL_196_AfterLabel_12))
(define-fun BL_196_AfterLabel_12__A1 () Bool (= |total_221_221___13| 0))
(define-fun BL_196_AfterLabel_12__A2 () Bool (= |j_375_375___14| 0))
(define-fun BL_196_AfterLabel_12__A3 () Bool (= |index_366_11_366_366___15| 0))
(assert (= BL_196_AfterLabel_12 (=> BL_196_AfterLabel_12__A1 (=> BL_196_AfterLabel_12__A2 (=> BL_196_AfterLabel_12__A3 BL_394_AfterLabel_20)))))
(define-fun |_JML__tmp12| () Bool (and (<= 0 |j_375_375___14|) (<= |j_375_375___14| |n_202_202___7|)))
(define-fun-rec sum_0 ((lo Int)(|i| Int)) Int (ite (< |i| lo) 0 (+ (sum_0 lo (- |i| 1)) (ite (and (and (<= 0 |i|) (< |i| |j_375_375___14|)) (distinct |j_375_375___14| |k_209_209___8|)) |i| 0))))
(declare-fun |_JML__tmp14| () Int)
(assert (= |_JML__tmp14| (sum_0 0 1000)))
(define-fun |_JML__tmp15| () Bool (= |total_221_221___13| |_JML__tmp14|))
(define-fun BL_394_AfterLabel_20__A1 () Bool (= |ASSERT_53| |_JML__tmp12|))
(define-fun BL_394_AfterLabel_20__A2 () Bool (= |ASSERT_55| |_JML__tmp15|))
(assert (= BL_394_AfterLabel_20 (=> BL_394_AfterLabel_20__A1 (and |ASSERT_53| (=> |ASSERT_53| (=> BL_394_AfterLabel_20__A2 (and |ASSERT_55| (=> |ASSERT_55| (and BL_366_LoopBody_21 BL_366_LoopEnd_23)))))))))
(define-fun BL_366_LoopBody_21__A1 () Bool true)
(define-fun BL_366_LoopBody_21__A2 () Bool (and (<= (- 2147483648) |index_366_11_366_394___19|) (<= |index_366_11_366_394___19| 2147483647)))
(define-fun BL_366_LoopBody_21__A3 () Bool (and (<= (- 2147483648) |j_375_389___17|) (<= |j_375_389___17| 2147483647)))
(define-fun BL_366_LoopBody_21__A4 () Bool (and (<= (- 2147483648) |total_221_510___18|) (<= |total_221_510___18| 2147483647)))
(define-fun BL_366_LoopBody_21__A5 () Bool (and (<= (- 2147483648) |index_366_11_366_394___19|) (<= |index_366_11_366_394___19| 2147483647)))
(assert (= BL_366_LoopBody_21 (=> BL_366_LoopBody_21__A1 (=> BL_366_LoopBody_21__A2 (=> BL_366_LoopBody_21__A3 (=> BL_366_LoopBody_21__A4 (=> BL_366_LoopBody_21__A5 BL_394_AfterLabel_25)))))))
(define-fun |_JML__tmp16| () Bool (and (<= 0 |j_375_389___17|) (<= |j_375_389___17| |n_202_202___7|)))
(define-fun-rec sum_1 ((lo Int)(|i| Int)) Int (ite (< |i| lo) 0 (+ (sum_1 lo (- |i| 1)) (ite (and (and (<= 0 |i|) (< |i| |j_375_389___17|)) (distinct |j_375_389___17| |k_209_209___8|)) |i| 0))))
(declare-fun |_JML__tmp18| () Int)
(assert (= |_JML__tmp18| (sum_1 0 1000)))
(define-fun |_JML__tmp19| () Bool (= |total_221_510___18| |_JML__tmp18|))
(define-fun |_JML__tmp20| () Int (- |n_202_202___7| |j_375_389___17|))
(define-fun |_JML__tmp21| () Int |_JML__tmp20|)
(define-fun |_JML__tmp22| () Bool (< |j_375_389___17| |n_202_202___7|))
(define-fun BL_394_AfterLabel_25__A1 () Bool (<= 0 |index_366_11_366_394___19|))
(define-fun BL_394_AfterLabel_25__A2 () Bool |_JML__tmp16|)
(define-fun BL_394_AfterLabel_25__A3 () Bool |_JML__tmp19|)
(assert (= BL_394_AfterLabel_25 (=> BL_394_AfterLabel_25__A1 (=> BL_394_AfterLabel_25__A2 (=> BL_394_AfterLabel_25__A3 (and BL_0_then_27 BL_0_else_28))))))
(define-fun BL_0_then_27__A1 () Bool (not |_JML__tmp22|))
(define-fun BL_0_then_27__A2 () Bool (= |BL_366_LoopAfter_24_source| 27))
(assert (= BL_0_then_27 (=> BL_0_then_27__A1 (=> BL_0_then_27__A2 BL_366_LoopAfter_24))))
(define-fun BL_0_else_28__A1 () Bool (not (not |_JML__tmp22|)))
(assert (= BL_0_else_28 (=> BL_0_else_28__A1 BL_0_afterIf_26)))
(define-fun |_JML__tmp24| () Int (+ |total_221_510___18| |j_375_389___17|))
(define-fun |_JML__tmp25| () Bool (and (<= |java.lang.Integer_MIN_VALUE| |_JML__tmp24|) (<= |_JML__tmp24| |java.lang.Integer_MAX_VALUE|)))
(define-fun |_JML__tmp26| () Bool (distinct |j_375_389___17| |k_209_209___8|))
(define-fun BL_0_afterIf_26__A1 () Bool (= |ASSERT_63| (<= 0 |_JML__tmp21|)))
(define-fun BL_0_afterIf_26__A2 () Bool |_JML__tmp25|)
(define-fun BL_0_afterIf_26__A3 () Bool (= |ASSERT_65| (distinct |__JML_AssumeCheck_| 2)))
(assert (= BL_0_afterIf_26 (=> BL_0_afterIf_26__A1 (and |ASSERT_63| (=> |ASSERT_63| (=> BL_0_afterIf_26__A2 (=> BL_0_afterIf_26__A3 (and |ASSERT_65| (=> |ASSERT_65| (and BL_0_then_31 BL_0_else_32))))))))))
(define-fun |_JML__tmp27| () Bool (or (not (and (< 0 |total_221_510___18|) (< 0 |j_375_389___17|))) (<= |total_221_510___18| (- 2147483647 |j_375_389___17|))))
(define-fun |_JML__tmp28| () Bool (or (not (and (< |total_221_510___18| 0) (< |j_375_389___17| 0))) (<= (- (- 2147483648) |j_375_389___17|) |total_221_510___18|)))
(define-fun |_JML__tmp29| () Int (ite (< 2147483647 (+ |total_221_510___18| |j_375_389___17|)) (+ (+ (+ |total_221_510___18| |j_375_389___17|) (- 2147483648)) (- 2147483648)) (ite (< (+ |total_221_510___18| |j_375_389___17|) (- 2147483648)) (- (- (+ |total_221_510___18| |j_375_389___17|) (- 2147483648)) (- 2147483648)) (+ |total_221_510___18| |j_375_389___17|))))
(define-fun BL_0_then_31__A1 () Bool |_JML__tmp26|)
(define-fun BL_0_then_31__A2 () Bool (and (<= (- 2147483648) |total_221_510___18|) (<= |total_221_510___18| 2147483647)))
(define-fun BL_0_then_31__A3 () Bool (and (<= (- 2147483648) |j_375_389___17|) (<= |j_375_389___17| 2147483647)))
(define-fun BL_0_then_31__A4 () Bool (= |ASSERT_68| (or (not (and (< 0 |total_221_510___18|) (< 0 |j_375_389___17|))) (<= |total_221_510___18| (- 2147483647 |j_375_389___17|)))))
(define-fun BL_0_then_31__A5 () Bool (= |ASSERT_69| (or (not (and (< |total_221_510___18| 0) (< |j_375_389___17| 0))) (<= (- (- 2147483648) |j_375_389___17|) |total_221_510___18|))))
(define-fun BL_0_then_31__A6 () Bool (= |total_221_510___20| |_JML__tmp29|))
(define-fun BL_0_then_31__A7 () Bool (= |BL_0_afterIf_30_source| 31))
(assert (= BL_0_then_31 (=> BL_0_then_31__A1 (=> BL_0_then_31__A2 (=> BL_0_then_31__A3 (=> BL_0_then_31__A4 (and |ASSERT_68| (=> |ASSERT_68| (=> BL_0_then_31__A5 (and |ASSERT_69| (=> |ASSERT_69| (=> BL_0_then_31__A6 (=> BL_0_then_31__A7 BL_0_afterIf_30)))))))))))))
(define-fun BL_0_else_32__A1 () Bool (not |_JML__tmp26|))
(define-fun BL_0_else_32__A2 () Bool (= |total_221_510___20| |total_221_510___18|))
(define-fun BL_0_else_32__A3 () Bool (= |BL_0_afterIf_30_source| 32))
(assert (= BL_0_else_32 (=> BL_0_else_32__A1 (=> BL_0_else_32__A2 (=> BL_0_else_32__A3 BL_0_afterIf_30)))))
(assert (= BL_0_afterIf_30 BL_394_AfterLabel_29))
(define-fun |_JML__tmp30| () Int |j_375_389___17|)
(define-fun |_JML__tmp31| () Bool (or (not (and (< 0 |j_375_389___17|) (< 0 1))) (<= |j_375_389___17| (- 2147483647 1))))
(define-fun |_JML__tmp32| () Bool (or (not (and (< |j_375_389___17| 0) (< 1 0))) (<= (- (- 2147483648) 1) |j_375_389___17|)))
(define-fun |_JML__tmp33| () Int (ite (< 2147483647 (+ |j_375_389___17| 1)) (+ (+ (+ |j_375_389___17| 1) (- 2147483648)) (- 2147483648)) (ite (< (+ |j_375_389___17| 1) (- 2147483648)) (- (- (+ |j_375_389___17| 1) (- 2147483648)) (- 2147483648)) (+ |j_375_389___17| 1))))
(define-fun |_JML__tmp34| () Int |j_375_389___21|)
(define-fun |_JML__tmp35| () Bool (and (<= 0 |j_375_389___21|) (<= |j_375_389___21| |n_202_202___7|)))
(define-fun-rec sum_2 ((lo Int)(|i| Int)) Int (ite (< |i| lo) 0 (+ (sum_2 lo (- |i| 1)) (ite (and (and (<= 0 |i|) (< |i| |j_375_389___21|)) (distinct |j_375_389___21| |k_209_209___8|)) |i| 0))))
(declare-fun |_JML__tmp37| () Int)
(assert (= |_JML__tmp37| (sum_2 0 1000)))
(define-fun |_JML__tmp38| () Bool (= |total_221_510___20| |_JML__tmp37|))
(define-fun |_JML__tmp39| () Int (- |n_202_202___7| |j_375_389___21|))
(define-fun |_JML__tmp40| () Int |_JML__tmp39|)
(define-fun BL_394_AfterLabel_29__A1 () Bool (and (<= (- 2147483648) |j_375_389___17|) (<= |j_375_389___17| 2147483647)))
(define-fun BL_394_AfterLabel_29__A2 () Bool (= |ASSERT_71| (or (not (and (< 0 |j_375_389___17|) (< 0 1))) (<= |j_375_389___17| (- 2147483647 1)))))
(define-fun BL_394_AfterLabel_29__A3 () Bool (= |ASSERT_72| (or (not (and (< |j_375_389___17| 0) (< 1 0))) (<= (- (- 2147483648) 1) |j_375_389___17|))))
(define-fun BL_394_AfterLabel_29__A4 () Bool (= |j_375_389___21| |_JML__tmp33|))
(define-fun BL_394_AfterLabel_29__A5 () Bool (= |index_366_11_366_366___22| (+ |index_366_11_366_394___19| 1)))
(define-fun BL_394_AfterLabel_29__A6 () Bool (= |ASSERT_73| |_JML__tmp35|))
(define-fun BL_394_AfterLabel_29__A7 () Bool (= |ASSERT_74| |_JML__tmp38|))
(define-fun BL_394_AfterLabel_29__A8 () Bool (= |ASSERT_75| (< |_JML__tmp40| |_JML__tmp21|)))
(assert (= BL_394_AfterLabel_29 (=> BL_394_AfterLabel_29__A1 (=> BL_394_AfterLabel_29__A2 (and |ASSERT_71| (=> |ASSERT_71| (=> BL_394_AfterLabel_29__A3 (and |ASSERT_72| (=> |ASSERT_72| (=> BL_394_AfterLabel_29__A4 (=> BL_394_AfterLabel_29__A5 (=> BL_394_AfterLabel_29__A6 (and |ASSERT_73| (=> |ASSERT_73| (=> BL_394_AfterLabel_29__A7 (and |ASSERT_74| (=> |ASSERT_74| (=> BL_394_AfterLabel_29__A8 (and |ASSERT_75| (=> |ASSERT_75| BL_366_LoopContinue_22))))))))))))))))))))
(assert (= BL_366_LoopContinue_22 true))
(define-fun BL_366_LoopEnd_23__A1 () Bool (not true))
(define-fun BL_366_LoopEnd_23__A2 () Bool (= |j_375_389___17| |j_375_375___14|))
(define-fun BL_366_LoopEnd_23__A3 () Bool (= |total_221_510___18| |total_221_221___13|))
(define-fun BL_366_LoopEnd_23__A4 () Bool (= |index_366_11_366_394___19| |index_366_11_366_366___15|))
(define-fun BL_366_LoopEnd_23__A5 () Bool (= |BL_366_LoopAfter_24_source| 23))
(assert (= BL_366_LoopEnd_23 (=> BL_366_LoopEnd_23__A1 (=> BL_366_LoopEnd_23__A2 (=> BL_366_LoopEnd_23__A3 (=> BL_366_LoopEnd_23__A4 (=> BL_366_LoopEnd_23__A5 BL_366_LoopAfter_24)))))))
(define-fun BL_366_LoopAfter_24__A1 () Bool (= |`result_196_532___23| |total_221_510___18|))
(define-fun BL_366_LoopAfter_24__A2 () Bool (= |`terminationPosition_196_532___24| 532))
(define-fun BL_366_LoopAfter_24__A3 () Bool (= |`exception_196_532___25| NULL))
(assert (= BL_366_LoopAfter_24 (=> BL_366_LoopAfter_24__A1 (=> BL_366_LoopAfter_24__A2 (=> BL_366_LoopAfter_24__A3 BL_532_return_33)))))
(assert (= BL_532_return_33 BL_196tryTarget_14))
(assert (= BL_196tryTarget_14 (and BL_196noException_16 BL_196nocatch_17)))
(define-fun BL_196noException_16__A1 () Bool (= |`exception_196_532___25| NULL))
(define-fun BL_196noException_16__A2 () Bool (= |BL_196_finally_15_source| 16))
(assert (= BL_196noException_16 (=> BL_196noException_16__A1 (=> BL_196noException_16__A2 BL_196_finally_15))))
(define-fun BL_196nocatch_17__A1 () Bool (distinct |`exception_196_532___25| NULL))
(define-fun BL_196nocatch_17__A2 () Bool (= |BL_196_finally_15_source| 17))
(assert (= BL_196nocatch_17 (=> BL_196nocatch_17__A1 (=> BL_196nocatch_17__A2 BL_196_finally_15))))
(define-fun BL_196_finally_15__A1 () Bool (= |__JMLsavedException_196_196_196___26| |`exception_196_532___25|))
(define-fun BL_196_finally_15__A2 () Bool (= |__JMLsavedTermination_196_196_196___27| |`terminationPosition_196_532___24|))
(define-fun BL_196_finally_15__A3 () Bool (= |ASSERT_76| (distinct |__JML_AssumeCheck_| 3)))
(assert (= BL_196_finally_15 (=> BL_196_finally_15__A1 (=> BL_196_finally_15__A2 (=> BL_196_finally_15__A3 (and |ASSERT_76| (=> |ASSERT_76| (and BL_0_then_35 BL_0_else_36))))))))
(define-fun BL_0_then_35__A1 () Bool (= |`exception_196_532___25| NULL))
(assert (= BL_0_then_35 (=> BL_0_then_35__A1 (and BL_0_then_38 BL_0_else_39))))
(define-fun-rec sum_3 ((lo Int)(|i| Int)) Int (ite (< |i| lo) 0 (+ (sum_3 lo (- |i| 1)) (ite (and (and (<= 0 |i|) (< |i| |n_202_202___7|)) (distinct |i| |k_209_209___8|)) |i| 0))))
(declare-fun |_JML__tmp42| () Int)
(assert (= |_JML__tmp42| (sum_3 0 1000)))
(define-fun |_JML__tmp43| () Bool (= |`result_196_532___23| |_JML__tmp42|))
(define-fun BL_0_then_38__A1 () Bool |Pre_2_102_59___12|)
(define-fun BL_0_then_38__A2 () Bool (= |ASSERT_77| |_JML__tmp43|))
(define-fun BL_0_then_38__A3 () Bool (= |BL_0_afterIf_37_source| 38))
(assert (= BL_0_then_38 (=> BL_0_then_38__A1 (=> BL_0_then_38__A2 (and |ASSERT_77| (=> |ASSERT_77| (=> BL_0_then_38__A3 BL_0_afterIf_37)))))))
(define-fun BL_0_else_39__A1 () Bool (not |Pre_2_102_59___12|))
(define-fun BL_0_else_39__A2 () Bool (= |BL_0_afterIf_37_source| 39))
(assert (= BL_0_else_39 (=> BL_0_else_39__A1 (=> BL_0_else_39__A2 BL_0_afterIf_37))))
(define-fun BL_0_afterIf_37__A1 () Bool (= |BL_0_afterIf_34_source| 37))
(assert (= BL_0_afterIf_37 (=> BL_0_afterIf_37__A1 BL_0_afterIf_34)))
(define-fun BL_0_else_36__A1 () Bool (not (= |`exception_196_532___25| NULL)))
(define-fun BL_0_else_36__A2 () Bool (= |ASSERT_78| (or (not (and (distinct |`exception_196_532___25| NULL) (javaSubType (javaTypeOf |`exception_196_532___25|) T_java_lang_Exception))) (or (not |Pre_2_102_59___12|) (or false (and (distinct |`exception_196_532___25| NULL) (javaSubType (javaTypeOf |`exception_196_532___25|) T_java_lang_RuntimeException)))))))
(define-fun BL_0_else_36__A3 () Bool (= |BL_0_afterIf_34_source| 36))
(assert (= BL_0_else_36 (=> BL_0_else_36__A1 (=> BL_0_else_36__A2 (and |ASSERT_78| (=> |ASSERT_78| (=> BL_0_else_36__A3 BL_0_afterIf_34)))))))
(define-fun BL_0_afterIf_34__A1 () Bool (= |`exception_196_196___28| |__JMLsavedException_196_196_196___26|))
(define-fun BL_0_afterIf_34__A2 () Bool (= |`terminationPosition_196_196___29| |__JMLsavedTermination_196_196_196___27|))
(assert (= BL_0_afterIf_34 (=> BL_0_afterIf_34__A1 (=> BL_0_afterIf_34__A2 (and BL_196finallyNormal_18 BL_196finallyExit_19)))))
(define-fun BL_196finallyNormal_18__A1 () Bool (= |`terminationPosition_196_196___29| 0))
(define-fun BL_196finallyNormal_18__A2 () Bool (= |BL_196_AfterTry_13_source| 18))
(assert (= BL_196finallyNormal_18 (=> BL_196finallyNormal_18__A1 (=> BL_196finallyNormal_18__A2 BL_196_AfterTry_13))))
(define-fun BL_196finallyExit_19__A1 () Bool (distinct |`terminationPosition_196_196___29| 0))
(define-fun BL_196finallyExit_19__A2 () Bool (= |BL_196_AfterTry_13_source| 19))
(assert (= BL_196finallyExit_19 (=> BL_196finallyExit_19__A1 (=> BL_196finallyExit_19__A2 BL_196_AfterTry_13))))
(assert (= BL_196_AfterTry_13 true))
(assert (not BL_196Start_1))
(push 1)
(assert (= __JML_AssumeCheck_ 0))
(push 1)
(check-sat)
